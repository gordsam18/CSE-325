@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>


<div id="score-board">
    <h4>Win totals</h4>
    <div>
        <h5>Player 1: @player1Wins </h5>
        <h5>Player 2: @player2Wins </h5>
    </div>
</div>
<nav>
    
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”»</span>
    }
    <article>
        @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
        <br />
        <span class="alert-danger">@errorMessage</span>
        <span class="alert-info">@CurrentTurn</span>
    </article>
</nav>

<div>
    <div class="board">
    @for (var i = 0; i < 42; i++)
    {
        <span class="container">
            <span></span>
        </span>
    }
    </div>
    @for (var i = 0; i < 42; i++)
    {
       <span class="@pieces[i]"></span>
    }
</div>

@code {
    private string[] pieces = new string[42];
    private int player1Wins = new int();
    private int player2Wins = new int();

    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";
    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        string GetWinnerMessage(GameState.WinState winState)
        {
            switch (winState)
            {
                case GameState.WinState.Player1_Wins:
                    player1Wins =+ 1;
                    return "player 1 Wins!";
                case GameState.WinState.Player2_Wins:
                    player2Wins =+ 1;
                    return "Player 2 Wins!";
                case GameState.WinState.Tie:
                    return "It's a tie!";
                default:
                    return "";
                
            }
        }
        
        var winState = State.CheckForWin();
        winnerMessage = GetWinnerMessage(winState);
        
        // winnerMessage = State.CheckForWin() switch
        //{
        //     GameState.WinState.Player1_Wins => "Player 1 Wins!",
        //     GameState.WinState.Player2_Wins => "Player 2 Wins!",
        //     GameState.WinState.Tie => "It's a tie!",
        //     _ => ""
        // };
    }
    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");
    protected override void OnInitialized()
    {
        player1Wins = 0;
        player2Wins = 0;
        State.ResetBoard();
    }
    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }
}